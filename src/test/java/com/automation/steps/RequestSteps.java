package com.automation.steps;

import com.automation.pojo.CreateBookingRequestPojo;
import com.automation.pojo.CreateBookingResponsePojo;
import com.automation.practice.pojo.CreateBookingPojo;
import com.automation.utils.ConfigReaderUtils;
import com.automation.utils.HelperUtils;
import com.automation.utils.RestAssuredUtils;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import groovyjarjarpicocli.CommandLine;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.restassured.response.Response;

public class RequestSteps {

    CreateBookingRequestPojo requestPojo;

    @Given("user set up request for {string}")
    public void user_setup_request_for_get_bookings(String endPoint) {
        RestAssuredUtils.setEndPoint(endPoint);
    }

    @When("user perform GET call")
    public void user_perform_get_call() {
        RestAssuredUtils.get();
    }

    @When("user perform POST call")
    public void user_perform_post_call() {
        RestAssuredUtils.post();
    }

    @Then("verify status code is {int}")
    public void verify_status_code_is(Integer statusCode) {
        System.out.println(RestAssuredUtils.getStatusCode());
    }

    @When("user set up header {string} to {string}")
    public void userSetUpHeaderTo(String key, String value) {
        RestAssuredUtils.setHeader(key, value);
    }

    @And("user set body {string} as a string")
    public void userSetBody(String fileName) {
        String jsonFolderPath = ConfigReaderUtils.getProperty("json.folder.path");
        String json = HelperUtils.readDataFromFile(jsonFolderPath + fileName);
        RestAssuredUtils.setBody(json);
    }

    @And("user set body {string} using pojo")
    public void userSetBodyUsingPojo(String fileName) {
        try {
            String jsonFolderPath = ConfigReaderUtils.getProperty("json.folder.path");
            String json = HelperUtils.readDataFromFile(jsonFolderPath + fileName);
            ObjectMapper om = new ObjectMapper();
            requestPojo = om.readValue(json, CreateBookingRequestPojo.class);
            RestAssuredUtils.setBody(requestPojo);
//            Gson gson = new Gson();
//            CreateBookingRequestPojo requestPojo = gson.fromJson(json, CreateBookingRequestPojo.class);
//            RestAssuredUtils.setBody(requestPojo);
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException();
        }
    }

    @And("verify response body has same data as request")
    public void verifyResponseBodyHasSameDataAsRequest() {
        Response response = RestAssuredUtils.getResponse();
        CreateBookingResponsePojo responsePojo = response.as(CreateBookingResponsePojo.class);
        CreateBookingRequestPojo responseBody = responsePojo.getBooking(); // this method generated by Lombok
        System.out.println(responseBody.equals(requestPojo));
    }

}
